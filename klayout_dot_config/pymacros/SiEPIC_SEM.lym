<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SEM image list</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.verification_submenu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># SiEPIC PDK
# script to find all SEM image requests in a layout
# by Lukas Chrostowski, 2017

import pya



def gen_ui():
  global wdg
  
  # If the window is already here, destroy it and start over again.
  if 'wdg' in globals():
    if wdg is not None and not wdg.destroyed():
      wdg.destroy()
  global wtext

  def button_clicked(checked):
    """ Event handler: "OK" button clicked """
    wdg.destroy()

  wdg = pya.QDialog(pya.Application.instance().main_window())

  wdg.setAttribute(pya.Qt.WA_DeleteOnClose)
  wdg.setWindowTitle("SiEPIC-Tools SEM image list")

  wdg.resize(1200, 2500)
  wdg.move(1, 1)

  grid = pya.QGridLayout(wdg)

  windowlabel1 = pya.QLabel(wdg)
  windowlabel1.setText("SiEPIC-Tools SEM image list:")
  wtext = pya.QTextEdit(wdg)
  wtext.enabled = True
  wtext.setText('')
  wtext.LineWrapMode = pya.QTextEdit.NoWrap

  ok = pya.QPushButton("OK", wdg)
  ok.clicked(button_clicked)   # attach the event handler
#  netlist = pya.QPushButton("Netlist Export", wdg) # not implemented

  grid.addWidget(windowlabel1, 0, 0, 1, 3)
  grid.addWidget(wtext, 1, 1, 3, 3)
#  grid.addWidget(netlist, 4, 2)
  grid.addWidget(ok, 4, 3)

  grid.setRowStretch(3, 1)
  grid.setColumnStretch(1, 1)

  wdg.show()





def find_all_SEMs(cell, LayerSEMN):
  # function to traverse the entire layout hierarchy and find all the SEM geometries
  # returns list of ....
  
  # Find all the SEM shapes; identify the component it belongs; 
  t= 'Find all SEM image boxes and polygons:&lt;br&gt;&lt;br&gt;'

  # Find all the SEM shapes
  iter1 = cell.begin_shapes_rec(LayerSEMN)
  i=0
  while not(iter1.at_end()):
    i+=1
    subcell = iter1.cell()             # cell (component) to which this shape belongs
    component = subcell.basic_name()   # name library component
    instance = subcell.name      
    subcell.name                # name of the cell; for PCells, different from basic_name
    found_component = False
    # SEM must be either a Box or a Polygon:
    if iter1.shape().is_box():
      box= iter1.shape().box.transformed(iter1.itrans())
      x, y = xy_mean_mult([[box.p1.x, box.p1.y], [box.p2.x, box.p2.y]],1)
      found_component = True
    if iter1.shape().is_polygon():
      polygon = iter1.shape().polygon.transformed(iter1.itrans())
      box = polygon.bbox()
      x, y = xy_mean_mult([[box.p1.x, box.p1.y], [box.p2.x, box.p2.y]],1)
      found_component = True

    # A component was found. record the instance info  
    if found_component:

      # Find text label for SEM
      iter2 = subcell.begin_shapes_rec(LayerSEMN)
      SEMlabel = ""
      while not(iter2.at_end()):
        if iter2.shape().is_text():
          SEMlabel = iter2.shape().text.string
        iter2.next()

      flip = iter1.trans().is_mirror()
      rotate = (int(iter1.trans().rot())*90) % 360
      t += "SEM image #%s: %s, %s, %s, %s, SEM label: %s, %s &lt;br&gt;" % (i, x*dbu,y*dbu,component,instance,SEMlabel, subcell.display_title())

      
    # end if found_component   
     
    iter1.next()
 
  # end while iter1 

  t += "&lt;br&gt;*** Number of SEM images: %s.&lt;br&gt;" % i
  return t
# end def find_all_SEMs


# ************************************************************************
# ************************************************************************
#  Main script:
# ************************************************************************
# ************************************************************************

#from time import strftime, clock
import time

# Create a GUI for the output:
gen_ui()

if 'wtext' in globals():
  wtext.insertHtml('Running SiEPIC-Tools SEM image list.&lt;br&gt;')
  wtext.insertHtml('* KLayout SiEPIC_Tools v%s, %s.&lt;br&gt;' % (SiEPIC_Version, time.strftime("%Y-%m-%d %H:%M:%S") ) )
clock_start = time.clock()


# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu
# Define layers based on PDK_functions:
LayerSEMN = ly.layer(LayerSEM)

t = find_all_SEMs(cell,LayerSEMN)
wtext.insertHtml (t)








</text>
</klayout-macro>
